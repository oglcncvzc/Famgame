This is the typescript code 

interface MissionStats {
  fails: number;
  gameId: string;
  playTime: number;
  wins: number;
}

const progressStats: Record<string, MissionStats> = {
  "archery-mission-lvl": {
    fails: 9,
    gameId: "archery-world-tour",
    playTime: 5291.706,
    wins: 8,
  },
  "archery-world-mission-1": {
    fails: 9,
    gameId: "archery-world-tour",
    playTime: 981,
    wins: 6,
  },
  "bubble-woods-mission-1": {
    fails: 19,
    gameId: "bubble-woods",
    playTime: 1206,
    wins: 9,
  },
  "bubble-woods-mission-lvl": {
    fails: 1,
    gameId: "bubble-woods",
    playTime: 100,
    wins: 2,
  },
  "candy-bubble-mission-lvl": {
    fails: 6,
    gameId: "candy-bubble",
    playTime: 1558,
    wins: 6,
  },
};

interface GameStats {
  fails: number;
  gameId: string;
  playTime: number;
  wins: number;
}

const gameStats: Record<string, GameStats> = {};

// Grouping and aggregation process
for (const missionId in progressStats) {
  const mission = progressStats[missionId];
  const gameId = mission.gameId;

  if (!gameStats[gameId]) {
    // If the game entry doesn't exist, create a new one
    gameStats[gameId] = {
      fails: 0,
      gameId: gameId,
      playTime: 0,
      wins: 0,
    };
  }

  // Accumulate the values
  gameStats[gameId].fails += mission.fails;
  gameStats[gameId].playTime += mission.playTime;
  gameStats[gameId].wins += mission.wins;
}

// Convert the result to an array
const result: GameStats[] = Object.values(gameStats);

console.log(result);


